"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
exports.stat = (filePath) => new Promise((resolve, reject) => {
    fs.stat(filePath, (error, stats) => error ? reject(error) : resolve(stats));
});
exports.mkdtemp = (prefix) => new Promise((resolve, reject) => {
    fs.mkdtemp(prefix, (error, created) => error ? reject(error) : resolve(created));
});
exports.writeFile = (directoryPath, data, options) => new Promise((resolve, reject) => {
    const callback = (error) => error ? reject(error) : resolve();
    if (options) {
        fs.writeFile(directoryPath, data, options, callback);
    }
    else {
        fs.writeFile(directoryPath, data, callback);
    }
});
exports.readFile = (directoryPath, options) => new Promise((resolve, reject) => {
    fs.readFile(directoryPath, options, (error, data) => error ? reject(error) : resolve(data));
});
exports.readdir = (directoryPath) => new Promise((resolve, reject) => {
    fs.readdir(directoryPath, (error, names) => error ? reject(error) : resolve(names));
});
exports.mkdir = (directoryPath, options) => new Promise((resolve, reject) => {
    fs.mkdir(directoryPath, options, (error) => error ? reject(error) : resolve());
})
    .catch((error) => __awaiter(this, void 0, void 0, function* () {
    if (error.code === 'EEXIST') {
        const stats = yield exports.stat(directoryPath);
        if (stats.isDirectory()) {
            return;
        }
    }
    throw error;
}));
exports.mkdirp = (directoryPath, options) => exports.mkdir(directoryPath, options)
    .catch((error) => {
    if (error.code === 'ENOENT') {
        return exports.mkdirp(path.dirname(directoryPath)).then(() => exports.mkdir(directoryPath));
    }
    throw error;
});
