"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const mime_1 = require("mime");
const upath_1 = require("upath");
const aws_sdk_1 = require("aws-sdk");
const S3Mock_1 = require("./S3Mock");
const globby = require("globby");
hexo.extend.deployer.register('aws-s3', function deployer(deploy) {
    return __awaiter(this, void 0, void 0, function* () {
        const { log, public_dir: publicDir } = this;
        const globPattern = upath_1.join(publicDir, '**/*');
        const files = yield globby(globPattern, Object.assign({}, deploy.glob, { onlyFiles: true }));
        const clientConfig = { region: deploy.region };
        const s3 = deploy.test ? new S3Mock_1.S3Mock(deploy.test, clientConfig) : new aws_sdk_1.S3(clientConfig);
        log.info(`Found ${files.length} files`);
        const results = yield Promise.all(files.map((filepath) => __awaiter(this, void 0, void 0, function* () {
            const Key = upath_1.toUnix(upath_1.join(deploy.prefix || '', upath_1.relative(publicDir, filepath)));
            const ContentType = mime_1.getType(filepath) || undefined;
            const params = {
                Bucket: deploy.bucket,
                Key,
                Body: fs_1.createReadStream(filepath),
                ContentType,
                ACL: 'public-read',
            };
            yield s3.putObject(params).promise();
            log.info(`Uploaded ${Key} [${ContentType}]`);
        })));
        log.info(`Uploaded ${results.length} files`);
    });
});
